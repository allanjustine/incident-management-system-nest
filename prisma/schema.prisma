// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//ENUM
enum UserRoles {
  ADMIN
  TECHNICIAN
  USER
}

enum Status {
  OPEN
  ONGOING
  RESOLVED
  CLOSED
}

//DATABASE
model UserLogin {
  id            Int              @id @default(autoincrement())
  username      String           @unique
  password      String
  rememberToken String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          UserDetail?
  teams         Team[]
  roles         Role[]
  reports       IncidentReport[]
}

model UserDetail {
  id          String    @id @default(uuid())
  user        UserLogin @relation(fields: [userId], references: [id])
  userId      Int       @unique
  firstName   String
  middleName  String?
  lastName    String
  phoneNumber String?
  address     String?
  email       String    @unique
}

model Team {
  id       Int         @id @default(autoincrement())
  name     String      @unique
  users    UserLogin[]
  category Category[]
}

model Role {
  id    Int         @id @default(autoincrement())
  name  UserRoles   @default(USER)
  users UserLogin[]
}

model Category {
  id     Int             @id @default(autoincrement())
  name   String          @unique
  team   Team            @relation(fields: [teamId], references: [id])
  teamId Int
  report IncidentReport?
}

model IncidentReport {
  id         Int       @id @default(autoincrement())
  user       UserLogin @relation(fields: [userId], references: [id])
  userId     Int
  status     Status    @default(OPEN)
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int       @unique
  content    String
  note       String?
}
